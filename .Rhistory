if (!x) {print("x isn't here")}
?exists
if (!exists(x)) {print("x isn't here")}
!(is.null(x))
library(dplyr)
library(magrittr)
library(purrr)
library(readr)
library(stringr)
library(tidyr)
raw_data <- readr::read_delim("input.txt",
col_names = FALSE,
delim = " ")
clean_data <- function(raw_data) {
return(
raw_data %>%
mutate(id = stringr::str_remove(X1, "#")) %>%
mutate(starting_coordinates = stringr::str_remove(X3, ":")) %>%
mutate(area = X4) %>%
select(id, starting_coordinates, area)
)
}
separate_coordinates_and_area <- function(clean_data) {
return(
clean_data %>%
tidyr::separate(starting_coordinates, into = c("start_x", "start_y")) %>%
tidyr::separate(area,
sep = "x",
into = c("extend_x", "extend_y"))
)
}
cleaned_data <- raw_data %>%
clean_data %>%
separate_coordinates_and_area() %>%
map_df(~ as.numeric(.))
cleaned_data %>% head()
turn_start_extend_into_vector <- function(start, extend) {
return((start):(start + extend - 1))
}
generate_coordinate_pairs <-
function(x_start, y_start, x_extend, y_extend) {
x_values <- turn_start_extend_into_vector(x_start, x_extend)
y_values <- turn_start_extend_into_vector(y_start, y_extend)
combined_pairs <- NULL
for (x in x_values) {
for (y in y_values) {
combined_pairs <- c(combined_pairs, paste(x, y, sep = "-"))
}
}
# combined_pairs <- paste(combined_pairs, collapse=",")
print(combined_pairs)
print("length of combined pairs: ")
print(length(combined_pairs))
# combined_pairs <- x_values %>%
#   purrr::map( ~ purrr::map2(., y_values, ~ paste(.x, .y, sep = "-"))) %>%
#   unlist() %>%
#   paste(collapse = ",") %>%
#   debug_pipe()
return(list(combined_pairs))
}
fake_function <- function(x, y) {
return(x + y)
}
generate_coordinate_pairs(0, 0, 3, 4)
# cleaned_data %<>%
#   mutate(coordinate_pairs = fake_function(extend_x, extend_y))
# This computation is really expensive! Takes about 4 minutes.
expand_data_in_a_really_expensive_way_that_takes_a_long_time <- function(cleaned_data) {
expanded_data <- cleaned_data %>%
rowwise() %>%
do(coordinate_pairs = generate_coordinate_pairs(.$start_x, .$start_y, .$extend_x, .$extend_y),
claim_id = id)
expanded_data %>% save('expanded_data')
return(expanded_data)
}
compute_doubly_claimed_coordinates <- function(cleaned_data) {
return(
cleaned_data %>%
unnest(coordinate_pairs) %>%
separate_rows() %>%
count(coordinate_pairs) %>%
filter(n > 1)
)
}
expanded_data <- expand_data_in_a_really_expensive_way_that_takes_a_long_time(cleaned_data)
library(dplyr)
library(magrittr)
library(purrr)
library(readr)
library(stringr)
library(tidyr)
raw_data <- readr::read_delim("input.txt",
col_names = FALSE,
delim = " ")
clean_data <- function(raw_data) {
return(
raw_data %>%
mutate(id = stringr::str_remove(X1, "#")) %>%
mutate(starting_coordinates = stringr::str_remove(X3, ":")) %>%
mutate(area = X4) %>%
select(id, starting_coordinates, area)
)
}
separate_coordinates_and_area <- function(clean_data) {
return(
clean_data %>%
tidyr::separate(starting_coordinates, into = c("start_x", "start_y")) %>%
tidyr::separate(area,
sep = "x",
into = c("extend_x", "extend_y"))
)
}
cleaned_data <- raw_data %>%
clean_data %>%
separate_coordinates_and_area() %>%
map_df(~ as.numeric(.))
cleaned_data %>% head()
library(dplyr)
library(magrittr)
library(purrr)
library(readr)
library(stringr)
library(tidyr)
raw_data <- readr::read_delim("input.txt",
col_names = FALSE,
delim = " ")
clean_data <- function(raw_data) {
return(
raw_data %>%
mutate(id = stringr::str_remove(X1, "#")) %>%
mutate(starting_coordinates = stringr::str_remove(X3, ":")) %>%
mutate(area = X4) %>%
select(id, starting_coordinates, area)
)
}
separate_coordinates_and_area <- function(clean_data) {
return(
clean_data %>%
tidyr::separate(starting_coordinates, into = c("start_x", "start_y")) %>%
tidyr::separate(area,
sep = "x",
into = c("extend_x", "extend_y"))
)
}
cleaned_data <- raw_data %>%
clean_data %>%
separate_coordinates_and_area() %>%
map_df(~ as.numeric(.))
cleaned_data %>% head()
turn_start_extend_into_vector <- function(start, extend) {
return((start):(start + extend - 1))
}
generate_coordinate_pairs <-
function(x_start, y_start, x_extend, y_extend) {
x_values <- turn_start_extend_into_vector(x_start, x_extend)
y_values <- turn_start_extend_into_vector(y_start, y_extend)
combined_pairs <- NULL
for (x in x_values) {
for (y in y_values) {
combined_pairs <- c(combined_pairs, paste(x, y, sep = "-"))
}
}
# combined_pairs <- paste(combined_pairs, collapse=",")
# print(combined_pairs)
print("length of combined pairs: ")
# print(length(combined_pairs))
# combined_pairs <- x_values %>%
#   purrr::map( ~ purrr::map2(., y_values, ~ paste(.x, .y, sep = "-"))) %>%
#   unlist() %>%
#   paste(collapse = ",") %>%
#   debug_pipe()
return(list(combined_pairs))
}
fake_function <- function(x, y) {
return(x + y)
}
generate_coordinate_pairs(0, 0, 3, 4)
# cleaned_data %<>%
#   mutate(coordinate_pairs = fake_function(extend_x, extend_y))
# This computation is really expensive! Takes about 4 minutes.
expand_data_in_a_really_expensive_way_that_takes_a_long_time <- function(cleaned_data) {
expanded_data <- cleaned_data %>%
rowwise() %>%
do(coordinate_pairs = generate_coordinate_pairs(.$start_x, .$start_y, .$extend_x, .$extend_y),
claim_id = id)
expanded_data %>% save('expanded_data')
return(expanded_data)
}
compute_doubly_claimed_coordinates <- function(cleaned_data) {
return(
cleaned_data %>%
unnest(coordinate_pairs) %>%
separate_rows() %>%
count(coordinate_pairs) %>%
filter(n > 1)
)
}
expanded_data <- expand_data_in_a_really_expensive_way_that_takes_a_long_time(cleaned_data)
View(raw_data)
View(raw_data)
library(dplyr)
library(magrittr)
library(purrr)
library(readr)
library(stringr)
library(tidyr)
raw_data <- readr::read_delim("input.txt",
col_names = FALSE,
delim = " ")
clean_data <- function(raw_data) {
return(
raw_data %>%
mutate(id = stringr::str_remove(X1, "#")) %>%
mutate(starting_coordinates = stringr::str_remove(X3, ":")) %>%
mutate(area = X4) %>%
select(id, starting_coordinates, area)
)
}
separate_coordinates_and_area <- function(clean_data) {
return(
clean_data %>%
tidyr::separate(starting_coordinates, into = c("start_x", "start_y")) %>%
tidyr::separate(area,
sep = "x",
into = c("extend_x", "extend_y"))
)
}
cleaned_data <- raw_data %>%
clean_data %>%
separate_coordinates_and_area() %>%
map_df(~ as.numeric(.))
cleaned_data %>% head()
turn_start_extend_into_vector <- function(start, extend) {
return((start):(start + extend - 1))
}
generate_coordinate_pairs <-
function(x_start, y_start, x_extend, y_extend) {
x_values <- turn_start_extend_into_vector(x_start, x_extend)
y_values <- turn_start_extend_into_vector(y_start, y_extend)
combined_pairs <- NULL
for (x in x_values) {
for (y in y_values) {
combined_pairs <- c(combined_pairs, paste(x, y, sep = "-"))
}
}
# combined_pairs <- paste(combined_pairs, collapse=",")
# print(combined_pairs)
# print(length(combined_pairs))
# combined_pairs <- x_values %>%
#   purrr::map( ~ purrr::map2(., y_values, ~ paste(.x, .y, sep = "-"))) %>%
#   unlist() %>%
#   paste(collapse = ",") %>%
#   debug_pipe()
return(list(combined_pairs))
}
fake_function <- function(x, y) {
return(x + y)
}
generate_coordinate_pairs(0, 0, 3, 4)
# cleaned_data %<>%
#   mutate(coordinate_pairs = fake_function(extend_x, extend_y))
# This computation is really expensive! Takes about 4 minutes.
expand_data_in_a_really_expensive_way_that_takes_a_long_time <- function(cleaned_data) {
expanded_data <- cleaned_data %>%
rowwise() %>%
do(coordinate_pairs = generate_coordinate_pairs(.$start_x, .$start_y, .$extend_x, .$extend_y),
claim_id = id)
expanded_data %>% save('expanded_data')
return(expanded_data)
}
compute_doubly_claimed_coordinates <- function(cleaned_data) {
return(
cleaned_data %>%
unnest(coordinate_pairs) %>%
separate_rows() %>%
count(coordinate_pairs) %>%
filter(n > 1)
)
}
expanded_data <- expand_data_in_a_really_expensive_way_that_takes_a_long_time(cleaned_data)
?save
library(dplyr)
library(magrittr)
library(purrr)
library(readr)
library(stringr)
library(tidyr)
raw_data <- readr::read_delim("input.txt",
col_names = FALSE,
delim = " ")
clean_data <- function(raw_data) {
return(
raw_data %>%
mutate(id = stringr::str_remove(X1, "#")) %>%
mutate(starting_coordinates = stringr::str_remove(X3, ":")) %>%
mutate(area = X4) %>%
select(id, starting_coordinates, area)
)
}
separate_coordinates_and_area <- function(clean_data) {
return(
clean_data %>%
tidyr::separate(starting_coordinates, into = c("start_x", "start_y")) %>%
tidyr::separate(area,
sep = "x",
into = c("extend_x", "extend_y"))
)
}
cleaned_data <- raw_data %>%
clean_data %>%
separate_coordinates_and_area() %>%
map_df(~ as.numeric(.))
cleaned_data %>% head()
turn_start_extend_into_vector <- function(start, extend) {
return((start):(start + extend - 1))
}
generate_coordinate_pairs <-
function(x_start, y_start, x_extend, y_extend) {
x_values <- turn_start_extend_into_vector(x_start, x_extend)
y_values <- turn_start_extend_into_vector(y_start, y_extend)
combined_pairs <- NULL
for (x in x_values) {
for (y in y_values) {
combined_pairs <- c(combined_pairs, paste(x, y, sep = "-"))
}
}
# combined_pairs <- paste(combined_pairs, collapse=",")
# print(combined_pairs)
# print(length(combined_pairs))
# combined_pairs <- x_values %>%
#   purrr::map( ~ purrr::map2(., y_values, ~ paste(.x, .y, sep = "-"))) %>%
#   unlist() %>%
#   paste(collapse = ",") %>%
#   debug_pipe()
return(list(combined_pairs))
}
fake_function <- function(x, y) {
return(x + y)
}
generate_coordinate_pairs(0, 0, 3, 4)
# cleaned_data %<>%
#   mutate(coordinate_pairs = fake_function(extend_x, extend_y))
# This computation is really expensive! Takes about 4 minutes.
expand_data_in_a_really_expensive_way_that_takes_a_long_time <- function(cleaned_data) {
expanded_data <- cleaned_data %>%
rowwise() %>%
do(coordinate_pairs = generate_coordinate_pairs(.$start_x, .$start_y, .$extend_x, .$extend_y),
claim_id = id)
expanded_data %>% save(file = 'expanded_data')
return(expanded_data)
}
compute_doubly_claimed_coordinates <- function(cleaned_data) {
return(
cleaned_data %>%
unnest(coordinate_pairs) %>%
separate_rows() %>%
count(coordinate_pairs) %>%
filter(n > 1)
)
}
expanded_data <- expand_data_in_a_really_expensive_way_that_takes_a_long_time(cleaned_data)
# compute_doubly_claimed_coordinates(cleaned_data)
View(expanded_data)
?rename
library(dplyr)
library(magrittr)
library(purrr)
library(readr)
library(stringr)
library(tidyr)
raw_data <- readr::read_delim("input.txt",
col_names = FALSE,
delim = " ")
clean_data <- function(raw_data) {
return(
raw_data %>%
mutate(claim_id = stringr::str_remove(X1, "#")) %>%
mutate(starting_coordinates = stringr::str_remove(X3, ":")) %>%
mutate(area = X4) %>%
select(id, starting_coordinates, area)
)
}
separate_coordinates_and_area <- function(clean_data) {
return(
clean_data %>%
tidyr::separate(starting_coordinates, into = c("start_x", "start_y")) %>%
tidyr::separate(area,
sep = "x",
into = c("extend_x", "extend_y"))
)
}
cleaned_data <- raw_data %>%
clean_data %>%
separate_coordinates_and_area() %>%
map_df(~ as.numeric(.))
library(dplyr)
library(magrittr)
library(purrr)
library(readr)
library(stringr)
library(tidyr)
raw_data <- readr::read_delim("input.txt",
col_names = FALSE,
delim = " ")
clean_data <- function(raw_data) {
return(
raw_data %>%
mutate(claim_id = stringr::str_remove(X1, "#")) %>%
mutate(starting_coordinates = stringr::str_remove(X3, ":")) %>%
mutate(area = X4) %>%
select(id, starting_coordinates, area)
)
}
separate_coordinates_and_area <- function(clean_data) {
return(
clean_data %>%
tidyr::separate(starting_coordinates, into = c("start_x", "start_y")) %>%
tidyr::separate(area,
sep = "x",
into = c("extend_x", "extend_y"))
)
}
cleaned_data <- raw_data %>%
clean_data %>%
separate_coordinates_and_area() %>%
map_df(~ as.numeric(.))
rlang::last_error()
?do
by_cyl <- group_by(mtcars, cyl)
do(by_cyl, head(., 2))
library(dplyr)
library(magrittr)
library(purrr)
library(readr)
library(stringr)
library(tidyr)
raw_data <- readr::read_delim("input.txt",
col_names = FALSE,
delim = " ")
clean_data <- function(raw_data) {
return(
raw_data %>%
mutate(claim = stringr::str_remove(X1, "#")) %>%
mutate(starting_coordinates = stringr::str_remove(X3, ":")) %>%
mutate(area = X4) %>%
select(id, starting_coordinates, area)
)
}
separate_coordinates_and_area <- function(clean_data) {
return(
clean_data %>%
tidyr::separate(starting_coordinates, into = c("start_x", "start_y")) %>%
tidyr::separate(area,
sep = "x",
into = c("extend_x", "extend_y"))
)
}
cleaned_data <- raw_data %>%
clean_data %>%
separate_coordinates_and_area() %>%
map_df(~ as.numeric(.))
rlang::last_error()
library(dplyr)
library(magrittr)
library(purrr)
library(readr)
library(stringr)
library(tidyr)
raw_data <- readr::read_delim("input.txt",
col_names = FALSE,
delim = " ")
clean_data <- function(raw_data) {
return(
raw_data %>%
debug_pipe() %>%
mutate(claim = stringr::str_remove(X1, "#")) %>%
mutate(starting_coordinates = stringr::str_remove(X3, ":")) %>%
mutate(area = X4) %>%
select(id, starting_coordinates, area)
)
}
separate_coordinates_and_area <- function(clean_data) {
return(
clean_data %>%
tidyr::separate(starting_coordinates, into = c("start_x", "start_y")) %>%
tidyr::separate(area,
sep = "x",
into = c("extend_x", "extend_y"))
)
}
cleaned_data <- raw_data %>%
clean_data %>%
separate_coordinates_and_area() %>%
map_df(~ as.numeric(.))
force(x)
View(x)
x$X1 %>% str_remove('#')
